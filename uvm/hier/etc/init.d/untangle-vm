#!/bin/bash

### BEGIN INIT INFO
# Provides:          untangle-vm
# Required-Start:    $local_fs $network $syslog
# Required-Stop:     $local_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Untangle Virtual Machine
### END INIT INFO

. /lib/lsb/init-functions

OEM_NAME="Untangle"
DESC="${OEM_NAME} VM"
UVM_LOGDIR=${UVM_LOGDIR:-/var/log/uvm}
UVM_RUNDIR=${UVM_RUNDIR:-/tmp}
UVM_NICENESS=${UVM_NICENESS:-0}
UVM_CMD=${UVM_CMD:-@PREFIX@/usr/bin/uvm}
UVM_USER=${UVM_USER:-root}
UVM_PID_FILE="/var/run/uvm.pid"
UVM_STATUS_FILE="/var/run/uvm.status"
UVM_CHUSER=" --chuid $UVM_USER:$UVM_USER "
UVM_TIMEOUT=300

# if in the build
if [ -n "@PREFIX@" ] ; then
    UVM_CHUSER=""
    UVM_NICENESS="0"
    if [ "$USER" != "root" ] ; then
        echo "sudo $0 $*"
        exec sudo -E $0 $*
    fi
fi

updateStatus() {
    echo -ne $1
}

updateStatusExit() {
    updateStatus $1 $2
    log_end_msg 0
    exit
}

# Finds the actual java uvm process
uvmJavaPid() { 
    ps awwx | awk '/[j]ava.*com.untangle.uvm.Main/ {print $1}' 
}
# Finds the java uvm process
uvmWrapperPid() { 
    ps awwx | awk '/.*python.*usr\/bin\/uvm/ {print $1}' 
}
# returns one of
# stopped - not running
# launching - uvm shell script has been launched
# booting - uvm java process is booting
# starting - uvm java process is starting apps
# running - normal runnig status
# unknown - status not known
uvmStatus() { 
    if [ -z "`uvmWrapperPid`" ] && [ -z "`uvmJavaPid`" ] ; then
        echo "stopped"
    elif [ -f ${UVM_STATUS_FILE} ] ; then
        # check that the STATUS is not stale
        if [ -f ${UVM_PID_FILE} ] ; then
            pid=`cat ${UVM_PID_FILE}`
            if ! ps ax | grep -qE '^\s*'$pid'\s' ; then
                # PID file is stale, so it doesnt matter whats in status
                echo "stopped"
            else
                # PID is current
                cat ${UVM_STATUS_FILE}
            fi
        else
            # no PID file
            echo "unknown"
        fi
    else
        echo "unknown"
    fi
}


case "$1" in
    start)
        log_daemon_msg "Starting $DESC"

        # This is a hack to not start during install phase
        if grep -q mv_install /proc/cmdline ; then
            echo "Skipping."
            log_end_msg 0
            exit
        fi

        if [ "`uvmStatus`" == "running" ] || [ "`uvmStatus`" == "launching" ] || [ "`uvmStatus`" == "booting" ]; then
            echo "untangle-vm already running."
		    log_end_msg 0
            exit
        fi
        
        updateStatus "[" "Starting"

        echo "launching" > ${UVM_STATUS_FILE}

        start-stop-daemon --start \
            --background --make-pidfile -q \
            --pidfile ${UVM_PID_FILE} \
            --chdir ${UVM_RUNDIR} \
            --nicelevel ${UVM_NICENESS} \
            $UVM_CHUSER \
            --exec ${UVM_CMD} -- ${UVM_ARGS}

        if [ $? != "0" ] ; then
            updateStatusExit "x]\n" "Stopped"
        fi
        pid=$(cat ${UVM_PID_FILE})

        # Wait for completion
        for i in `seq 1 $UVM_TIMEOUT` ; do
            echo -n "."

            ps -p $pid >/dev/null
            if [ $? -ne 0 ]; then
                updateStatusExit "x]\n" "Stopped"
            fi

            if [ "`uvmStatus`" == "running" ] || [ "`uvmStatus`" == "starting" ]; then
                break
            fi

            sleep 1
        done

        echo -n "|"

        for i in `seq 1 $UVM_TIMEOUT` ; do
            echo -n "."

            if [ "`uvmStatus`" == "running" ] ; then
                updateStatusExit "]\n" "Running"
            fi

            sleep 1
        done

        echo "x]"
	    log_end_msg 0
        ;;

    stop)
        log_daemon_msg "Stopping $DESC"

        if [ "`uvmStatus`" == "stopped" ]; then
            echo "Not Running."
	        log_end_msg 0
            exit
        fi

        updateStatus "[" "Stopping"

        # if the pid file is missing, recover it
        if [ ! -f ${UVM_PID_FILE} ] ; then
            uvmWrapperPid > ${UVM_PID_FILE}
        fi

        # Attempt polite kill first
        start-stop-daemon -s INT --stop -q --pidfile ${UVM_PID_FILE}
        code=$?

        # exit if start-stop-daemon failed and the process was not found anyway (it must already be dead)
        if [ $code != "0" ] && [ "`uvmStatus`" == "stopped" ] ; then
            updateStatusExit "x]\n" "Stopped"
        fi

        # Wait for completion
        for i in `seq 1 20` ; do
            echo -n "."
            if [ "`uvmStatus`" == "stopped" ] ; then
                updateStatusExit "]\n" "Stopped"
            fi
            sleep 1
        done

        # Attempt more aggressive kill now
        echo -n "ungraceful exit"
        kill -INT `uvmJavaPid` &>/dev/null
        kill -INT `uvmWrapperPid` &>/dev/null
        killall -s INT uvm &>/dev/null
        kill `uvmJavaPid` &>/dev/null
        kill `uvmWrapperPid` &>/dev/null
        killall uvm &>/dev/null

        # Wait for completion
        for i in `seq 1 5` ; do
            echo -n "."
            if [ "`uvmStatus`" == "stopped" ] ; then
                updateStatusExit "]\n" "Stopped"
            fi
            sleep 1
        done

        # Wait for completion
        echo -n "!"
        for i in `seq 1 5` ; do
            # send a kill signal
            kill -9 `uvmJavaPid` &>/dev/null
            kill -9 `uvmWrapperPid` &>/dev/null
            killall -9 uvm &>/dev/null

            echo -n "."
            if [ "`uvmStatus`" == "stopped" ] ; then
                rm -f ${UVM_PID_FILE}
                rm -f ${UVM_STATUS_FILE}
                updateStatusExit "]\n" "Stopped"
            fi
            sleep 1
        done

        echo "x]"
	    log_end_msg 0
        ;;

    restart|force-reload)
        $0 stop
        $0 start
        ;;

    *)
        echo "Usage: /etc/init.d/untangle-vm {start|stop|restart|force-reload}"
        exit
esac

exit 0
